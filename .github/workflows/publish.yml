name: Publish

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main]
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  publish-fixtures:
    runs-on: ubuntu-latest
    environment: Publish
    # Only run if CI succeeded or triggered manually/by tag
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Get version from package.json
        id: version
        working-directory: quillmark-fixtures
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Publish @quillmark-test/fixtures
        working-directory: quillmark-fixtures
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Fixtures publish summary
        if: success()
        run: echo "✓ @quillmark-test/fixtures v${{ steps.version.outputs.version }} published to npm"

  publish-wasm:
    runs-on: ubuntu-latest
    environment: Publish
    # Only run if CI succeeded or triggered manually/by tag
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: wasm32-unknown-unknown

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Extract version from workspace Cargo.toml
        id: version
        run: |
          VERSION=$(grep -m1 '^version = ' Cargo.toml | cut -d'"' -f2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing WASM version: $VERSION"

      - name: Build WASM packages
        run: ./scripts/build-wasm.sh

      - name: Publish @quillmark/wasm
        working-directory: pkg/bundler
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: WASM publish summary
        if: success()
        run: echo "✓ @quillmark/wasm v${{ steps.version.outputs.version }} published to npm"

  publish-crates:
    runs-on: ubuntu-latest
    environment: Publish
    # Only run if CI succeeded or triggered manually/by tag
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "ci-${{ hashFiles('**/Cargo.lock') }}"
          cache-on-failure: true

      - name: Publish workspace crates (no verification)
        run: cargo publish --workspace --locked --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

      - name: Crates publish summary
        if: success()
        run: echo "✓ All publishable workspace crates published to crates.io"

  summary:
    needs: [publish-fixtures, publish-wasm, publish-crates]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Overall summary
        run: |
          echo "## Publishing Summary"
          echo ""
          if [ "${{ needs.publish-fixtures.result }}" == "success" ]; then
            echo "✓ Fixtures published to npm"
          else
            echo "✗ Fixtures publishing failed"
          fi
          if [ "${{ needs.publish-wasm.result }}" == "success" ]; then
            echo "✓ WASM published to npm"
          else
            echo "✗ WASM publishing failed"
          fi
          if [ "${{ needs.publish-crates.result }}" == "success" ]; then
            echo "✓ Crates published to crates.io"
          else
            echo "✗ Crates publishing failed"
          fi
